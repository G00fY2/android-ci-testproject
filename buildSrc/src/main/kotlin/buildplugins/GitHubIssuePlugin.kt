package buildplugins

import org.gradle.api.DefaultTask
import org.gradle.api.GradleException
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.plugins.HelpTasksPlugin.HELP_GROUP
import org.gradle.api.tasks.TaskAction
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter
import java.time.temporal.ChronoUnit
import java.util.concurrent.TimeUnit
import javax.inject.Inject

class GitHubIssuePlugin : Plugin<Project> {

  override fun apply(target: Project) {
    if (target.rootProject == target) {
      target.tasks.register("createGitHubDependencyUpdatesIssue", CreateGitHubIssueTask::class.java) {
        dependsOn("dependencyUpdates")
        description = "Creates or updates GitHub issues from a dependencyUpdates report file."
        group = HELP_GROUP
      }
    }
  }
}

open class CreateGitHubIssueTask @Inject constructor() : DefaultTask() {

  companion object {
    const val GITHUB_ISSUE_TAG = "dependency-update" // this issue tag needs to exist in the github project
  }

  @TaskAction
  fun createGitHubIssueFromReportFile() {
    val expectedReportFile = project.file("${project.buildDir}/dependencyUpdates/ci-report.txt")
    if (expectedReportFile.exists()) {
      val fileContent = expectedReportFile.readLines()
      if (fileContent.isNotEmpty()) {
        val builder = StringBuilder()
        val title = "Outdated dependencies (${fileContent.size})"
        builder.append("**The following dependencies and plugins are outdated:**[^1]")
        fileContent.forEach {
          builder.appendLine()
          builder.append("- [ ] $it")
        }
        builder.appendLine()
        builder.append("[^1]: Generated by ")
        builder.append(javaClass.canonicalName.substringBefore("_"))
        builder.append(" (")
        builder.append(getCurrentTimestamp())
        builder.append(")")

        getLatestDependencyUpdateIssueID()?.let {
          updateExistingIssue(it, title, builder.toString())
        } ?: run {
          createNewIssue(title, builder.toString())
        }
      } else {
        logger.quiet("No outdated dependencies found.")
      }
    } else {
      logger.warn("Could not find 'ci-report.txt'. Make sure 'dependencyUpdates' task is set up correctly.")
    }
  }

  private fun updateExistingIssue(issueID: String, title: String, body: String) {
    listOf("gh", "issue", "edit", issueID, "-t", title, "-b", body)
      .runCommand().let { result ->
        if (result.first) {
          logger.quiet("Successfully updated: ${result.second}")
        } else {
          logger.error("Updating issue $issueID failed: ${result.second}")
        }
      }
  }

  private fun createNewIssue(title: String, body: String) {
    listOf("gh", "issue", "create", "-t", title, "-b", body, "-l", GITHUB_ISSUE_TAG)
      .runCommand().let { result ->
        if (result.first) {
          logger.quiet("Successfully created: ${result.second}")
        } else {
          logger.error("Creating new issue failed: ${result.second}")
        }
      }
  }

  private fun getLatestDependencyUpdateIssueID(): String? {
    return listOf("gh", "issue", "list", "-l", GITHUB_ISSUE_TAG, "-s", "open")
      .runCommand().let { result ->
        if (result.first) {
          Regex("^+\\d*\\s").find(result.second)?.value?.trim() ?: ""
        } else {
          logger.error("Listing issues failed: ${result.second}")
          ""
        }
      }
      .toIntOrNull()?.toString()
  }


  private fun getCurrentTimestamp(): String {
    return LocalDateTime.now(ZoneId.of("Europe/Berlin"))
      .truncatedTo(ChronoUnit.SECONDS)
      .format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)
  }

  private fun List<String>.runCommand(): Pair<Boolean, String> {
    return try {
      ProcessBuilder(this).redirectErrorStream(true).start()
        .run {
          waitFor(10, TimeUnit.SECONDS)
          Pair(exitValue() == 0, inputStream.bufferedReader().use { it.readText().trim() })
        }
    } catch (e: Exception) {
      throw GradleException("${e.message ?: "Error executing command: $this"}\nMake sure the GitHub CLI is available.")
    }
  }
}